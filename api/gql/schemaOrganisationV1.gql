
# --------------------------------------------------------------------------------
# Scalars and data constraints
# --------------------------------------------------------------------------------

# String "xx", "xx.xx", or "xx.xx.xx"
# Right padded wildcards, '*', is supported
scalar KLE

# String, 10 digit number
scalar CPR

# String, 8 digit number - ID of the business assigned by Danish business Authority 
scalar CVR

# Universally Unique IDentifier (RFC4122), eg. 0235dc7b-11c4-4ee5-b685-9f638f5cd032
scalar UUID

# Date and time, ISO 8601 
scalar DateTime

#paginating cursor
scalar Cursor

directive @PersonDataConstraint(constraint : PersonDataConstraintType!) on FIELD_DEFINITION
#  ... data limitaion in service agreement ”SeNavn” og ”SeCPR-nummer” 

enum PersonDataConstraintType {
    SENAVN,
    SECPR
} 

# The valid states
enum TilstandStatus {
    AKTIV
    INAKTIV
}

type OrganisationEnhedConnection {
    edges: [OrganisaionEnhedEdge]
    pageInfo: PageInfo!
}

type OrganisaionEnhedEdge {
    cursor: Cursor
    node: OrganisationEnhed!
}



type BrugerConnection {
    edges: [BrugerEdge]
    pageInfo: PageInfo!
}

type BrugerEdge {
    cursor: Cursor
    node: Bruger!
}



type PageInfo {
    startCursor: Cursor
    endCursor: Cursor
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
}



# --------------------------------------------------------------------------------
# Organization and units
# --------------------------------------------------------------------------------


# Forretningsobjektet Myndighed er en udvidelse til forretningsobjektet Organisation. En myndighed har en lovudøvende funktion. Kommunerne og store dele af den øvrige offentlige administration er offentlige myndigheder. Objektet Myndighed tilknyttes en Organisation 
# (The public authoirity)
type Myndighed {
    uuid: UUID!
    # Number, 3 or 4 digits, which identifies an authority.
    myndighedskode: String!
}

#Forretningsobjektet Virksomhed er en udvidelse til Organisation, så der kan registreres et CVR-nummer, og dermed etableres en relation til CVR-registeret. En virksomhed er oprettet i CVR-registreret med et CVR-nummer, der efter opslag i CVR-registreret kan give adgang til oplysninger om virksomheden. Der registreres derfor alene CVR-nummer i Fælleskommunalt Organisationssystem.
# (The business as registered by The Danish business Authority)
type Virksomhed {
    uuid: UUID!
    # Number identifying the compagny
    cvrNummerTekst: CVR!
}

# Forretningsobjektet Organisation repræsenterer en juridisk enhed. En kommune er et eksempel på en organisation. En organisation skal altid tilknyttes et virksomhedsobjekt og for myndigheders vedkommende et myndighedsobjekt. Dermed sikres, at CVR-nummer og eventuel myndighedskode kan føres tilbage til den gældende organisation.
#A legal entity, typically a municipality 
type Organisation {
    uuid: UUID!
    	
   	# Name of the Organisation
    organisationsnavn: String!
    # Externally given key
    brugervendtNoegle: String!
    # Myndighed
    myndighed: Myndighed
    # Virksomhed
    virksomhed: Virksomhed!
    # The root entity
    organisationEnhed: OrganisationEnhed!
}

# Forretningsobjektet OrganisationEnhed kan være et center, en afdeling, en sektion, et kontor, et team, en institiution eller lignende. Kommunens administrative organisation er opbygget af OrganisationEnheder.
#(The organisation unit)
type OrganisationEnhed {
    uuid: UUID!
    
    # Name of the Unit
    enhedsnavn: String!
    # Brugervendt identifikation af objektet, dvs. identifikation fra kildesystemet for data

  	# Externally given key
    brugervendtNoegle: String

  	# The child nodes 
    underliggendeEnheder: [OrganisationEnhed!]!
    
  	# The parrent node
    overordnetEnhed: OrganisationEnhed
    
    # The state object
    tilstand: Tilstand!
    
  	# The Organization
    tilhoerer: Organisation!
  
    adresser(rolle: [UUID!]): [Adresse!]!
    opgaver:[Opgave!]!
    itSystemer:[ItSystem!]!
  
    # List of medlemskaber
    medlemskaber(rolle:[UUID!]): [OrganisationEnhedMedlemskab!]!
  
  	  	
  	henvendelsessteder: [Henvendelsessted!]!
     
}


type Henvendelsessted {
  # uuid of the underlying organisationFunktion 
  uuid: UUID!
  
  navn: String!
  henvendelsesOrganisationEnhed: OrganisationEnhed!
  opgave: Opgave
  
  
  
}


# --------------------------------------------------------------------------------
# User and person
# --------------------------------------------------------------------------------

type Bruger {
  uuid: UUID!
  
  # An unique name for the user in the Organization, typically the IT user name.
  brugernavn:String!
  
  # Externally given key
  brugervendtNoegle: String
  
  # UUID to klassifikation: 
  # eg. 
  # 9de1426d-2ffb-4d3b-95aa-2afdec22c133 for "Ekstern bruger"
  # fe5bec29-0709-4b45-b935-2748ff554c7a for "Intern bruger"
  # fb24bae4-beb1-4970-9a94-cf7ce215f63c, for "Non-Person Entity bruger" 
  brugerTypeUuid:UUID
  
  #The title of the role - from Klassifikation, 
  #Ekstern bruger, Intern bruger, Non-Person Entity bruger
  brugerTypeTitel: String
  
  tilstand: Tilstand!

  person: Person

  adresser(rolle: [UUID!]): [Adresse!]!
  
  # Only include Active in the list!
  harMedlemskab(rolle: [UUID!]): [BrugerMedlemskab!]!
      
}


#one person can have multiple users ...... 
type Person {
    
  uuid: UUID!
  navn: String @PersonDataConstraint(constraint: SENAVN)
  # Externally given key
  brugervendtNoegle: String
  cpr: CPR  @PersonDataConstraint(constraint: SECPR)
}





type Adresse {
    
    #Id of the address, eg. "c31d2c7b-26fe-4a5f-b4da-f99961c78991"
  	uuid:  UUID!
    
	  #The value of the address, eg. "Halfdansgade 10, 2., 2300 København S"
 	  adresseTekst: String!
  
    brugervendtNoegle:String
  
    # Details from Klassifikation  
    # Value from Klassification, eg. "Postadresse", "E-mail"  
    # If we can't obtain it from Klassification, it will be empty
    # There should be an error object with a warning in this case
   	adresseRolleTitel: String
  	klassifikation: KlassifikationRelation!    
  
}

type Opgave {
  
  # ID, eg 3544e723-1a24-43e8-841a-efef55cb3e3c
	uuid: UUID!
  
  # The number, eg. "04.05.00"
  kleEmneNummer:KLE
  # The title, eg. "Hundetoiletter i almindelighed"
  kleEmneTitel: String
  
  # "Ansvarlig", "Udførende", "Informeret"
  # Not filled in for Henvendelsteder
  opgaveRolleTitel:String
  
  # Details from Klassifikation- not fillled in for Henvendelsteder 
  klassifikation: KlassifikationRelation
  
}


#Logiske it-systemer, registeret i Fælleskommunalt Administrationsmodul. 
# (IT system, as registred in "Fælleskommunalt Administrationsmodul")
type ItSystem {
 
  # The uuid of the IT-system in Fælleskommunalt Administrationsmodul
  uuid: UUID!
 
  # Name of the IT-Systemin Fælleskommunalt Administrationsmodul
  itSystemNavn: String
      
}



# The state of the object with a interval of when the state is in effect [fraTidspunkt, tilTidspunkt[ 
type Tilstand { 
    # The state of an object
    status: TilstandStatus!
    	
    # The state is in effect from - including the time. 
    fraTidspunkt: DateTime
  
    # The state is in effect to - excluding the time
    tilTidspunkt: DateTime 
}




# what do we call this kind of relation where we have type, rolle and index ???
type KlassifikationRelation {
  # The id of the relation type in Klassifikation, eg. 9b33c0a0-a566-4ec0-8200-325cb1e5bb9a for address for organization unit 
  type: UUID!
  # The id of the relation role in Klassifikation, eg  80b610c6-314b-485a-a014-a9a1d7070bc4 for Postadresse
  rolle: UUID!
  
  indeks: String!  
}




# https://arkitektur.digst.dk/specifikationer/organisation/oio-specifikation-af-model-organisation
# aka. organisatorisk tilknytning
# Describes the relation between a Bruger(user) and OrganisationEnhed (Org. unit)
interface Medlemskab {

  # uuid of the underlying organisationFunktion 
  uuid: UUID!
  
  # Typicaly a job title
  # Naming - taken from oio -v2?
  medlemskabRolleTitel: String
  
  # Externally given key
  brugervendtNoegle: String
    
  # UUID to klassifikation 
  #eg. 02e61900-33e0-407f-a2a7-22f70221f003/57553824-5ed0-4a64-b8aa-7e801df264f6/46c73630-f7ad-4000-9624-c06131cde671
  funktionsTypeUuid: UUID
  #Enhedsrolle (Arbejder i)/ ansat i/ Lederrolle
  funktionsTypeTitel: String
  
  # the dates of active employment ..... 
  # narrow possible view. 
  start: DateTime
  slut: DateTime
     
}

type BrugerMedlemskab implements Medlemskab {
    uuid: UUID!
    medlemskabRolleTitel: String
    brugervendtNoegle: String
    funktionsTypeUuid: UUID
    funktionsTypeTitel: String
    start: DateTime
    slut: DateTime
    # the related organisationsenhed
    medlemAf: OrganisationEnhed
}

type OrganisationEnhedMedlemskab implements Medlemskab {
    uuid: UUID!
    medlemskabRolleTitel: String
    brugervendtNoegle: String
    funktionsTypeUuid: UUID
    funktionsTypeTitel: String
    start: DateTime
    slut: DateTime
    # the related Bruger
    bruger: Bruger
}


# if rolle is omitted no units are filtered out base on rolle.
input KleFilter {
	rolle:UUID
  kleNummer:[KLE!]!
}


# *@kmd.dk, j*kmd.*

  # - BrugerNavn = "xxx*"
  # - (adresseRolle, adresseTekst*) = (uuid, "*.kombit.dk ")
  # - personNavn = "xxx*" (seperate filter for person?? NB. datarestriction) 
  # - personCpr (data restriction!!) 


  
  
  
input AdresseRolleFilter {
    # UUID of the Rolle from Klassification, eg. xxx for the users email address 
  	rolle: UUID!
    tekst:String!
}

type Query {
  
  organisation(cvr: CVR!): Organisation
  
 	# If the root node is in the result, it is the first element of the list
	organisationEnhedListe(cvr: CVR!, status: TilstandStatus!, opgaver:KleFilter, itSystemer:[UUID!], first: Int, last: Int, after: Cursor, before: Cursor): OrganisationEnhedConnection
  
  # TODO:
  # Adjust so it can take a list of uuid as input - like bruger?
  organisationEnhed(uuid: UUID!): OrganisationEnhed 
  
  
    
  bruger(uuid: [UUID!]!): [Bruger]
  
  # Optional filters
  # - brugerNavn = "xxx*x", wildcard *supported
  # - Brugertype = UUID from Klassifikation
  # - brugerAdresse = (uuid, "*.kombit.dk ")
  # - personNavn = "xx*x*", data restrction 
  # - personCPR =  "xx*x*", data restrction 
  
  brugerListe(cvr: CVR!, status:TilstandStatus!, brugerNavn: String, brugerType: UUID, brugerAdresse: AdresseRolleFilter, personNavn: String, personCPR: CPR, first: Int, last: Int, after: Cursor, before: Cursor): BrugerConnection
  

 
}

